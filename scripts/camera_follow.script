go.property("trap_width", 200)
go.property("trap_height", 150)
go.property("left_bound", -400)
go.property("right_bound", 400)
go.property("top_bound", 300)
go.property("bottom_bound", -300)

function init(self)
	-- ID of the target object to follow
	self.target_id = go.get_id("cat")

	-- Initialize the bounds using the exposed properties
	self.bounds = {
		left = self.left_bound,
		right = self.right_bound,
		top = self.top_bound,
		bottom = self.bottom_bound
	}

	-- Define the trap extents
	self.trap = {
		width = self.trap_width,
		height = self.trap_height
	}

	msg.post("#camera", "acquire_camera_focus")
end

function update(self, dt)

	-- Get the position of the target
	local target_pos = go.get_position(self.target_id)

	pprint("Update camera=", target_pos)
	
	-- Get the current position of the camera
	local cam_pos = go.get_position()

	-- Calculate the trap boundaries
	local trap_left = cam_pos.x - self.trap.width / 2
	local trap_right = cam_pos.x + self.trap.width / 2
	local trap_top = cam_pos.y + self.trap.height / 2
	local trap_bottom = cam_pos.y - self.trap.height / 2

	-- Move the camera if the target is outside the trap boundaries
	if target_pos.x < trap_left then
		cam_pos.x = target_pos.x + self.trap.width / 2
	elseif target_pos.x > trap_right then
		cam_pos.x = target_pos.x - self.trap.width / 2
	end

	if target_pos.y > trap_top then
		cam_pos.y = target_pos.y - self.trap.height / 2
	elseif target_pos.y < trap_bottom then
		cam_pos.y = target_pos.y + self.trap.height / 2
	end

	-- Apply bounds to the camera position
	if cam_pos.x < self.bounds.left then
		cam_pos.x = self.bounds.left
	elseif cam_pos.x > self.bounds.right then
		cam_pos.x = self.bounds.right
	end

	if cam_pos.y < self.bounds.bottom then
		cam_pos.y = self.bounds.bottom
	elseif cam_pos.y > self.bounds.top then
		cam_pos.y = self.bounds.top
	end

	-- Set the new camera position
	go.set_position(cam_pos)
end
